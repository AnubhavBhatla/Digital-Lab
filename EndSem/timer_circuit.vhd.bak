library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity FSM is
	port( inp_switch:in std_logic_vector(2 downto 0);
			reset, clock_1:in std_logic;
			op:out std_logic_vector(1 downto 0));
end FSM;

entity timer_ckt is
port (clock_1, clock_50, reset : in std_logic;
		LED : out std_logic_vector(3 downto 0);
		timer_inp : in std_logic_vector(1 downto 0));
-- timer_inp is State Machine output
end entity timer_ckt;
-- Define architecture body
architecture beh2 of timer_ckt is

process(clock_50)
variable timer1 : integer range 0 to 300E6 := 1;
-- 500E6 means 500 x 10 ^ 6
-- the above variable will count the number
-- of clock pulses till it reaches required
-- number of seconds
-- Use similar 2 other variables for timer2, timer3
variable timer2 : integer range 0 to 400E6 := 1;
variable timer3 : integer range 0 to 550E6 := 1;
begin
-- Fill your code here
-- You may have to use multiple nested if condition here
-- e.g. clock_50'event, reset, condition for increment etc.
-- reset will initialize the timer1, timer2 and timer3 with
-- the value 1
-- timer1 := timer1 + 1;
-- this is the syntax to increment timer variable
-- remember : you have to assign LED here also
if (reset = '1') then
	timer1 := 1;
	timer2 := 1;
	timer3 := 1;
	LED <= "1000";
elsif (clock_50' event and clock_50 = '1') then
	timer1 := timer1 + 1;
	timer2 := timer2 + 1;
	timer3 := timer3 + 1;
	if (timer1 = 300E6) then
		LED <= "0001";
	elsif (timer2 = 400E6) then
		LED <= "0010";
	elsif (timer3 = 550E6) then
		LED <= "0100";
	end if;
end if;

end process;
end beh2;